library std;
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;
use work.components_init.all;
--------------------------------------------------------------------------
entity ALU is
  port (
	
	alu_a : in std_logic_vector(15 downto 0);
	alu_b : in std_logic_vector(15 downto 0);

	cz: in std_logic_vector(1 downto 0 );
	carry_in: in std_logic; --input carry 
	zero_in: in std_logic; --input zero
	alu_op : in std_logic_vector(5 downto 0); --opcode to classify the type of instruction 
	alu_out : out std_logic_vector(15 downto 0);
	carry : out std_logic; --carry_out
	zero : out std_logic --zero_out
  ) ;
end entity ; -- ALU

architecture alu of ALU is

	signal negative_a : std_logic_vector(15 downto 0);
	signal negative_b : std_logic_vector(15 downto 0);
	signal alu_out_sig : std_logic_vector(15 downto 0);
	signal carry_when_pos : std_logic;
	signal carry_when_neg : std_logic;
	signal neg_addition : std_logic_vector(15 downto 0);

begin
	--2's Compliment of a and b
	-- negative_a <= std_logic_vector(unsigned(not alu_a) + 1);
	negative_b <= std_logic_vector(unsigned(not alu_b) + 1);

	process(alu_a, alu_b, alu_op)
	begin 
		if alu_op = "0010" then --NAND operations

			if cz = "10" then --NDC
                if carry_in = "1" then  
			        alu_out_sig <= alu_a nand alu_b;--(a nand b)
			    end if;
            end if;

            if cz = "01" then  --NDZ
                if zero_in ="1" then
                    alu_out_sig <= alu_a nand alu_b;
                end if;
            end if;

            else 
                alu_out_sig <= alu_a nand alu_b;
		end if;
		if alu_op = "1000" or alu_op="1001" then --Subtraction in BEQ, BLT,BLE
			alu_out_sig <= std_logic_vector(unsigned(alu_a) + unsigned(negative_b));--(a-b)

            if(alu_out_sig[15] ='1') then 
                carry ='1'; --if carry comes means alu_a <alu_b
            else
                carry='0';
            end if;
			-- neg_addition <= std_logic_vector(unsigned(negative_a) + unsigned(alu_b));--(-a+b)
            -- carry <='0';
		end if;
		
		if alu_op = "0001" or alu_op="0000" then --All addition instructions
		
			if cz= "10"  then  --ADC or ACC
                if carry_in = "1" then
                    alu_out_sig <= std_logic_vector(unsigned(alu_a) + unsigned(alu_b));--(a+b)
                -- neg_addition <= std_logic_vector(unsigned(negative_a) + unsigned(negative_b));--(-a-b) 
                        if alu_a(15) = '0' and alu_b(15) = '0' and alu_out_sig(15) = '1' then 
                            carry_when_pos <= '1';
                        else 
                            carry_when_pos <= '0';
                        end if;
        
                        
                        if alu_a(15) = '1' and alu_b(15) = '1' and alu_out_sig(15) = '0' then 
                            carry_when_neg <= '1';
                        else 
                            carry_when_neg <= '0';
                        end if;
                    carry <= carry_when_neg or carry_when_pos;
                end if;
			end if;
			  
			if cz= "01" then --ADZ or ACZ
                if zero_in = "1" then
                    alu_out_sig <= std_logic_vector(unsigned(alu_a) + unsigned(alu_b));--(a+b)
                -- neg_addition <= std_logic_vector(unsigned(negative_a) + unsigned(negative_b));--(-a-b) 
                        if alu_a(15) = '0' and alu_b(15) = '0' and alu_out_sig(15) = '1' then 
                            carry_when_pos <= '1';
                        else 
                            carry_when_pos <= '0';
                        end if;
        
                        
                        if alu_a(15) = '1' and alu_b(15) = '1' and alu_out_sig(15) = '0' then 
                            carry_when_neg <= '1';
                        else 
                            carry_when_neg <= '0';
                        end if;
                    carry <= carry_when_neg or carry_when_pos;
                end if;
			end if;

            if cz =="11" then --AWC or ACW
                alu_out_sig <= std_logic_vector(unsigned(alu_a) + unsigned(alu_b) + unsigned(carry_in));--(a+b)
            -- neg_addition <= std_logic_vector(unsigned(negative_a) + unsigned(negative_b));--(-a-b) 
                        if (((alu_a(15)='0' or alu_b(15)='0') and carry ='1') or (alu_a(15) = '0'and alu_b(15) = '0')) and alu_out_sig(15) = '1' then 
                            carry_when_pos <= '1';
                        else 
                            carry_when_pos <= '0';
                        end if;
    
                    
                    if(((alu_a(15)='1' or alu_b(15)='1') and carry ='1') or (alu_a(15) = '1'and alu_b(15) = '1')) and alu_out_sig(15) = '0' then 
                        carry_when_neg <= '1';
                    else 
                        carry_when_neg <= '0';
                    end if;
                carry <= carry_when_neg or carry_when_pos;

                else
                    alu_out_sig <= std_logic_vector(unsigned(alu_a) + unsigned(alu_b));--(a+b)
                    -- neg_addition <= std_logic_vector(unsigned(negative_a) + unsigned(negative_b));--(-a-b) 
                            if alu_a(15) = '0' and alu_b(15) = '0' and alu_out_sig(15) = '1' then 
                                carry_when_pos <= '1';
                            else 
                                carry_when_pos <= '0';
                            end if;
            
                            
                            if alu_a(15) = '1' and alu_b(15) = '1' and alu_out_sig(15) = '0' then 
                                carry_when_neg <= '1';
                            else 
                                carry_when_neg <= '0';
                            end if;
                        carry <= carry_when_neg or carry_when_pos;

		end if;

        if alu_op ="0110" or alu_op="0111" or alu_op = "0100" or alu_op="0101" then  --add for LM,SM,LW,SW
            alu_out_sig <= std_logic_vector(unsigned(alu_a) + signed (alu_b));--(a+b)
        end if;
                    

	end process;

	alu_out <= alu_out_sig;
	zero <= "1" when alu_out_sig = "0000000000000000" else "0";

	
end architecture ; -- alu
--------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity incrementer is
    port (
      data_in : in std_logic_vector(15 downto 0);
      data_out : out std_logic_vector(15 downto 0)
    ) ;
  end entity ; -- incrementer
  
  architecture INC of incrementer is
  
  begin
  
      data_out <= std_logic_vector(unsigned(data_in) + 1);
  
  end architecture ; -- INC
--------------------------------------------------------------------------
  entity instruction_register is
    port (
  
      inst_in : in std_logic_vector(15 downto 0);
      inst_out : out std_logic_vector(15 downto 0);
      inst_enable : in std_logic;
      clk : in std_logic
  
    ) ;
  end entity ; -- register_data
  
  architecture IR_inst of instruction_register is
  
  begin
  
      process(clk) 
      begin 
          if (clk'event and clk = '1') then 
              if inst_enable = '1' then 
                  inst_out <= inst_in;
              end if;
          end if;
      end process;
  
  
  end architecture ; -- IR_inst
--------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

  entity instruction_info is --information about instruction
    port (
      instruction : in std_logic_vector(15 downto 0);
      instruction_operation : out std_logic_vector(1 downto 0);
      instruction_carry : out std_logic;
      instruction_zero : out std_logic;
      instruction_type : out std_logic_vector(3 downto 0)
    ) ;
  end entity ; -- instruction_info

  architecture IR of instruction_info is
  
      signal OP : std_logic_vector(3 downto 0);
      signal CZ : std_logic_vector(1 downto 0);
  
  begin
      OP <= instruction(15 downto 12);
      
      process(OP)
      variable carry_variable : std_logic_1164 := '0';
      variable zero_variable : std_logic_1164 := '0';
      variable inst_op_variable : std_logic_vector(1 downto 0) := "10"; --None operation
      begin 
          if OP = "0000" or OP = "0010" then
              CZ <= instruction(1 downto 0);
			 end if;

          if OP = "0000" or OP = "0001" then 
              carry_variable := '1';
              zero_variable := '1';
              inst_op_variable := "11";--Addition in ALU

          end if;
          if OP = "0010" then
              carry_variable := '0';
              zero_variable := '1';
              inst_op_variable := "00";
          end if;
          instruction_carry <= carry_variable;
          instruction_zero <= zero_variable;
          instruction_operation <= inst_op_variable;
      end process;
  
      process(OP)
      variable inst_type_variable : std_logic_vector(3 downto 0) := "0000";
      begin 
          if OP = "0000" or OP = "0010" then --AND and NAND instructions
              inst_type_variable := "0000";
          elsif OP = "0001" then 
              inst_type_variable := "0001"; --ADI instruction
          elsif OP = "0100" then
              inst_type_variable := "0010"; --LWI instruction
          elsif OP = "0101" then
              inst_type_variable := "0011"; --SWI instruction 
          elsif OP = "1100" then
              inst_type_variable := "0100"; --BEQ instruction 
          elsif OP = "1000" then
              inst_type_variable := "0101"; --JAL instruction 
          elsif OP = "1001" then
              inst_type_variable := "0110"; --JLR instruction 
          elsif OP = "0110" then
              inst_type_variable := "0111"; --LM instruction 
          elsif OP = "0111" then
              inst_type_variable := "1000"; --SM instruction 
          end if;
          instruction_type <= inst_type_variable;
      end process;

  end architecture ; -- IR
--------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity memory is
port (

    --Clock 
    clk : in std_logic;

    --Memory read and write signals 
    -- memory_read : in std_logic;
    memory_write : in std_logic;

    --Address in 
    address_in : in std_logic_vector(15 downto 0);

    --Data in 
    data_in : in std_logic_vector(15 downto 0);

    --Used to Initialize
    initialize : in std_logic;

    --Data out of the memory 
    data_out : out std_logic_vector(15 downto 0)

) ;
end entity ; -- memory

architecture memory_comp of memory is
type memory_database is array(0 to 127) of std_logic_vector(15 downto 0);
signal memory_block : memory_database;

begin
    process(clk)
    begin 
    if (clk'event and clk = '1') then 
        if (initialize = '1') then 
            loop1 : for i in 0 to 127 loop --15 register for instruction rest to store values
                memory_block(i) <= "0000000000000000";
            end loop ; -- loop1
            if (memory_write = '1') then
                memory_block(to_integer(unsigned(address_in(3 downto 0)))) <= data_in;
            end if;
        end if;
    end if;
    data_out <= memory_block(to_integer(unsigned(address_in(3 downto 0)))); -- default 

    end process;
end architecture ; -- memroy_comp
--------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity reg_file is
    port (
  
        --Clock 
      clk : in std_logic_1164;
  
      --Register file read and write signals 
      --1 corresponds to read and 0 nothing for both
      reg_file_read : in std_logic_1164; 
      reg_file_write : in std_logic_1164;
  
      --PC in to check if some other source is writing to PC (pc_select = "00" corresponds to none)
      PC_write_rf : in std_logic_vector(1 downto 0);
  
      --Address - 1 signal value 
      address_1 : in std_logic_vector(15 downto 0);
      --Address - 2 signal value 
      address_2 : in std_logic_vector(15 downto 0);
      --Address - 3 signal value for writing to A3
      address_3 : in std_logic_vector(15 downto 0);
  
      --Data in and out signal values 
      data_in : in std_logic_vector(15 downto 0);
      data_out_1 : out std_logic_vector(15 downto 0);
      data_out_2 : out std_logic_vector(15 downto 0)
  
    ) ;
  end entity ; -- reg_file
  
  architecture rf of reg_file is
  
      signal reg_0 : std_logic_vector(15 downto 0);
      signal reg_1 : std_logic_vector(15 downto 0);
      signal reg_2 : std_logic_vector(15 downto 0);
      signal reg_3 : std_logic_vector(15 downto 0);
      signal reg_4 : std_logic_vector(15 downto 0);
      signal reg_5 : std_logic_vector(15 downto 0);
      signal reg_6 : std_logic_vector(15 downto 0);
      signal reg_7 : std_logic_vector(15 downto 0);
  
  begin
      --Process and clock is given only for writing to registers as writing occurs at the clock edge
      process(clk) is 
      begin
          --Rising edge of the clock
          if (clk'event and clk = '1') then 
              if (reg_file_write = '1') and PC_write_rf /= "00" then 
                  if address_3 = "000" then 
                      reg_0 <= data_in;
                  end if;
                  if address_3 = "001" then 
                      reg_1 <= data_in;
                  end if;
                  if address_3 = "010" then 
                      reg_2 <= data_in;
                  end if;
                  if address_3 = "011" then 
                      reg_3 <= data_in;
                  end if;
                  if address_3 = "100" then 
                      reg_4 <= data_in;
                  end if;
                  if address_3 = "101" then 
                      reg_5 <= data_in;
                  end if;
                  if address_3 = "110" then 
                      reg_6 <= data_in;
                  end if;
              end if;
              if (reg_file_write = '1') and PC_write_rf = "00" then 
                  reg_7 <= data_in;
              end if;
          end if;
          --Writing to registers done!!!
      end process;
  
      process(reg_file_read, address_1, address_2)
      variable data_out_1_var : std_logic_vector(15 downto 0);
      variable data_out_2_var : std_logic_vector(15 downto 0);
      begin
      --Reading from registers can happen anytime, so no process
      if reg_file_read = "1" then
          if address_1 = "000" then
              data_out_1_var := reg_0;
          elsif address_1 = "001" then
              data_out_1_var := reg_1;
          elsif address_1 = "010" then
              data_out_1_var := reg_2;
          elsif address_1 = "011" then
              data_out_1_var := reg_3;
          elsif address_1 = "100" then
              data_out_1_var := reg_4;
          elsif address_1 = "101" then
              data_out_1_var := reg_5;
          elsif address_1 = "110" then
              data_out_1_var := reg_6;
          elsif address_1 = "111" then
              data_out_1_var := reg_7;
          end if;
          --Address 2 
          if address_2 = "000" then
              data_out_2_var := reg_0;
          elsif address_2 = "001" then
              data_out_2_var := reg_1;
          elsif address_2 = "010" then
              data_out_2_var := reg_2;
          elsif address_2 = "011" then
              data_out_2_var := reg_3;
          elsif address_2 = "100" then
              data_out_2_var := reg_4;
          elsif address_2 = "101" then
              data_out_2_var := reg_5;
          elsif address_2 = "110" then
              data_out_2_var := reg_6;
          elsif address_2 = "111" then
              data_out_2_var := reg_7;
          end if;
      end if;
      data_out_1 <= data_out_1_var;
      data_out_2 <= data_out_2_var;
      end process;
  
  end architecture; -- rf